<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.mapper.main.MainMapper">

	<resultMap type="inqBoardVO" id="inqBoardMap">
		<id property="inqNo" column="inq_no"/>
		<result property="inqNo" column="inq_no"/>
		<result property="inqTitle" column="inq_title"/>
		<result property="inqCont" column="inq_cont"/>
		<result property="inqRepl" column="inq_repl"/>
		<result property="inqDate" column="inq_date"/>
		<result property="inqConf" column="inq_conf"/>
		<result property="cusRnum" column="cus_rnum"/>
		<collection property="customerVO" resultMap="customerMap"/>
	</resultMap>
	
	<resultMap type="customerVO" id="customerMap">
		<id property="cusRnum" column="cus_rnum"/>
		<result property="cusRnum" column="cus_rnum"/>
		<result property="cusPw" column="cus_pw"/>
		<result property="cusCom" column="cus_com"/>
		<result property="cusName" column="cus_name"/>
		<result property="cusLogo" column="cus_logo"/>
		<result property="cusAddr" column="cus_addr"/>
		<result property="cusAddr2" column="cus_addr2"/>
		<result property="cusZip" column="cus_zip"/>
		<result property="cusTel" column="cus_tel"/>
		<result property="cusEmp" column="cus_emp"/>
		<result property="cusEmail" column="cus_email"/>
		<result property="cusBirth" column="cus_birth"/>
		<result property="cusImage" column="cus_image"/>
		<result property="cusSignature" column="cus_signature"/>
		<collection property="attachList" resultMap="attachMap"/>
		<collection property="paymentVO" resultMap="paymentMap"/>
	</resultMap>

	<resultMap type="paymentVO" id="paymentMap">
		<id property="payCode" column="pay_code"/>
		<result property="payCode" column="pay_code"/>
		<result property="payDate" column="pay_date"/>
		<result property="payEdate" column="pay_edate"/>
		<result property="payAmt" column="pay_amt"/>
		<result property="payMethod" column="pay_method"/>
		<result property="cusRnum" column="cus_rnum"/>
		<result property="payStatus" column="pay_status"/>
		<result property="levelName" column="level_name"/>
		<result property="levelMemo" column="level_memo"/>
		<result property="levelFee" column="level_fee"/>
		<result property="levelVol" column="level_vol"/>
		<result property="funcName" column="func_name"/>
		<result property="funcMemo" column="func_memo"/>
		<result property="funcFee" column="func_fee"/>
		<association property="funcLevelList" resultMap="funcLevelMap"></association>
	</resultMap>
	
	<resultMap type="funcLevelVO" id="funcLevelMap">
		<result property="payCode" column="pay_code"/>
		<result property="funcName" column="func_name"/>
		<result property="funcMemo" column="func_memo"/>
		<result property="funcFee" column="func_fee"/>
	</resultMap>
	
	<resultMap type="attachVO" id="attachMap">
		<id property="fileNo" column="file_no"/>
		<result property="fileNo" column="file_no"/>
		<result property="fileSavepath" column="file_savepath"/>
		<result property="fileName" column="file_name"/>
		<result property="fileOrgname" column="file_orgname"/>
		<result property="fileSize" column="file_size"/>
		<result property="fileMime" column="file_mime"/>
		<result property="fileDowncount" column="file_downcount"/>
		<result property="fileRegdate" column="file_regdate"/>
		<result property="fileUploader" column="file_uploader"/>
		<result property="fileDelConf" column="file_del_conf"/>
		<result property="fileDelDate" column="file_del_date"/>
		<result property="fileCode" column="file_code"/>
	</resultMap>

	<!-- 문의게시판 -->
	<sql id="boardSearch">
		<if test="searchType != null and searchType == 'inqTitle'">
			and (i.inq_title like '%'||#{searchWord}||'%')
		</if>
		<if test="searchType != null and searchType == 'cusCom'">
			and (c.cus_com like '%'||#{searchWord}||'%')
		</if>
		<if test="searchType != null and searchType == 'cusName'">
			and (c.cus_name like '%'||#{searchWord}||'%')
		</if>
		<if test="searchType != null and searchType == 'cusRnum'">
			and (i.cus_rnum like '%'||#{searchWord}||'%')
		</if>
	</sql>
	
	<select id="selectBoardCount" parameterType="pagingVO" resultType="int">
		select count(i.inq_no)
		from inq_board i
		where 1=1
		<include refid="boardSearch"/>
	</select>

	<select id="selectBoardList" parameterType="pagingVO" resultMap="inqBoardMap">
		select
			b.*
		from(
			select
				a.*, row_number() over (order by a.inq_no desc) rnum
			from(
				select
				    i.inq_no, i.inq_title, i.cus_rnum, c.cus_name, c.cus_com, i.inq_date, i.inq_conf
				from inq_board i left outer join customer c on i.cus_rnum = c.cus_rnum
				where 1=1
				<include refid="boardSearch"/>
				order by i.inq_no desc
			) a
		) b
		<![CDATA[
			where b.rnum >= #{startRow} and b.rnum <= #{endRow}
		]]>
	</select>

	<insert id="insertBoard" parameterType="inqBoardVO" useGeneratedKeys="true">
		<selectKey keyProperty="inqNo" resultType="int" order="BEFORE">
			select seq_inq_board.nextval from dual
		</selectKey>
		insert into inq_board(
			inq_no, inq_title, inq_cont, inq_repl, inq_date, inq_conf, cus_rnum
		)values(
			#{inqNo}, #{inqTitle}, #{inqCont}, '', sysdate, 'N', #{cusRnum}
		)
	</insert>
	
	<select id="selectBoard" parameterType="int" resultMap="inqBoardMap">
		select
		    i.inq_no, i.inq_title, i.inq_cont, i.inq_repl, i.inq_date, i.inq_conf,
		    c.cus_rnum, c.cus_name, c.cus_com, c.cus_email
		from inq_board i left outer join customer c on (i.cus_rnum = c.cus_rnum)
		where inq_no = #{inqNo}
	</select>
	
	<update id="updateBoard" parameterType="inqBoardVO">
		update inq_board
			set
				inq_title = #{inqTitle},
				inq_cont = #{inqCont},
				inq_date = sysdate
		where inq_no = #{inqNo}
	</update>
	
	<delete id="deleteBoard" parameterType="int">
		delete from inq_board
		where inq_no = #{inqNo}
	</delete>
	
	<update id="replyBoard" parameterType="inqBoardVO">
		update inq_board
		set
			inq_repl = #{inqRepl},
			inq_conf = 'Y'
		where inq_no = #{inqNo}
	</update>
	
<!-- 	<insert id="insertPayment" parameterType="customerVO" useGeneratedKeys="true"> -->
<!-- 		<selectKey keyProperty="payCode" resultType="String" order="BEFORE"> -->
<!-- 			select seq_payment.nextval from dual -->
<!-- 		</selectKey> -->
		
<!-- 		insert all into payment( -->
<!-- 			pay_code, pay_date, pay_edate, pay_amt, pay_method, cus_rnum -->
<!-- 		)values( -->
<!-- 			#{payCode}, sysdate, sysdate+30, '', '', #{cusRnum} -->
<!-- 		)into payment_detail( -->
<!-- 			pay_code, level_name -->
<!-- 		)values( -->
<!-- 			#{payCode}, #{levelName} -->
<!-- 		)into func_level( -->
<!-- 			pay_code, func_name -->
<!-- 		)values( -->
<!-- 			#{payCode}, #{funcName} -->
<!-- 		) -->
<!-- 		select * from dual -->
<!-- 	</insert> -->

	<insert id="insertPayment" parameterType="customerVO" useGeneratedKeys="true">
    <selectKey keyProperty="payCode" resultType="String" order="BEFORE">
        select seq_payment.nextval from dual
    </selectKey>
    
    insert into payment(
	        pay_code, pay_date, pay_edate, pay_amt, pay_method, cus_rnum, pay_status
	    ) values (
	        #{payCode}, sysdate, sysdate + 30, '', '카드', #{cusRnum}, 'N'
	    )
	</insert>
	
	<insert id="insertPaymentDetail" parameterType="customerVO">
	    insert into payment_detail(
	        pay_code, level_name
	    ) values (
	        #{payCode}, #{levelName}
	    )
	</insert>
	
	
	<insert id="insertFuncLevel">
		<foreach collection="funcNames" item="item" index="index"
			separator=" " open="INSERT ALL" close="SELECT * FROM DUAL">
			into func_level(
				pay_code, func_name
			) values (
				#{payCode}, #{item}
			)
		</foreach>
	</insert>
	
	<update id="updatePrice" parameterType="paymentVO">
		UPDATE payment
			SET pay_amt = (
			        SELECT SUM(level_fee * c.cus_emp)
			        FROM payment_detail pd
			        LEFT OUTER JOIN LEVEL_INFO li ON pd.level_name = li.level_name
			        LEFT OUTER JOIN payment p on pd.pay_code = p.pay_code
			        LEFT OUTER JOIN customer c ON p.cus_rnum = c.cus_rnum
			        WHERE pd.pay_code = payment.pay_code
			    ) +
			    (
			        SELECT SUM(func_fee)
			        FROM func_level fl
			        LEFT OUTER JOIN FUNC_INFO fi ON fl.func_name = fi.func_name
			        WHERE fl.pay_code = payment.pay_code
			    )
			WHERE payment.pay_code = #{payCode}
	</update>
	
	<select id="paymentDetail" parameterType="String" resultMap="paymentMap">
		select
		    p.pay_code, p.pay_date, p.pay_edate, p.pay_amt, p.pay_method, p.cus_rnum, p.pay_status,
		    pd.level_name,
		    li.level_memo, li.level_fee, li.level_vol,
		    fl.func_name, fi.func_memo, fi.func_fee
		from payment p left outer join payment_detail pd on p.pay_code = pd.pay_code
		               left outer join level_info li on pd.level_name = li.level_name
		               left outer join func_level fl on pd.pay_code = fl.pay_code
		               left outer join func_info fi on fl.func_name = fi.func_name
		where pay_code = #{payCode}
	</select>
	
	<select id="selectMemberImage" parameterType="String" resultMap="customerMap">
		select cus.cus_rnum, cus.cus_com, cus.cus_name,
			(select attach.file_savepath from attach where cus.cus_logo = attach.file_no) cus_logo,
		    (select attach.file_savepath from attach where cus.cus_image = attach.file_no) cus_image, 
		    (select attach.file_savepath from attach where cus.cus_signature = attach.file_no) cus_signature, cus.cus_zip,
			cus_addr, cus_addr2, cus_tel, cus_emp, cus_email, cus_birth
		from customer cus
		where cus.cus_rnum = #{cusRnum}
	</select>

<!-- 	<select id="paymentDetail" parameterType="String" resultMap="customerMap"> -->
<!-- 		select -->
<!-- 		    p.pay_code, p.pay_date, p.pay_edate, p.pay_amt, p.pay_method, p.pay_status, -->
<!-- 		    c.cus_rnum, c.cus_com, c.cus_name, pd.level_name, -->
<!-- 		    li.level_memo, li.level_fee, li.level_vol, -->
<!-- 		    fl.func_name, fi.func_memo, fi.func_fee -->
<!-- 		from payment p left outer join customer c on p.cus_rnum = c.cus_rnum -->
<!-- 		               left outer join payment_detail pd on p.pay_code = pd.pay_code -->
<!-- 		               left outer join level_info li on pd.level_name = li.level_name -->
<!-- 		               left outer join func_level fl on pd.pay_code = fl.pay_code -->
<!-- 		               left outer join func_info fi on fl.func_name = fi.func_name -->
<!-- 		where pay_code = #{payCode} -->
<!-- 	</select> -->
	
<!-- 	<select id="selectCustomerEmail" parameterType="String" resultType="customerVO"> -->
<!-- 		select -->
<!-- 			cus_rnum, cus_pw, cus_com, cus_name, cus_logo, cus_addr, cus_addr2, cus_zip, -->
<!-- 			cus_tel, cus_emp, cus_email, cus_birth, cus_image, cus_signature -->
<!-- 		from customer -->
<!-- 		where cus_rnum = #{cusRnum} -->
<!-- 		and cus_email = #{cusEmail} -->
<!-- 	</select> -->

<!-- 	<select id="selectPayCode" parameterType="String" resultType="paymentVO"> -->
<!-- 		select -->
<!-- 		    pay_code -->
<!-- 		from (select cus_rnum, pay_code, ROW_NUMBER() OVER(PARTITION BY cus_rnum ORDER BY pay_code DESC) AS rn -->
<!-- 		      from payment) -->
<!-- 		where rn = 1 -->
<!-- 		and cus_rnum = #{cusRnum} -->
<!-- 	</select> -->

<!-- 	<select id="selectPayCode" parameterType="String" resultMap="customerMap"> -->
<!-- 		select -->
<!-- 		    p.pay_code, p.pay_date, p.pay_edate, p.pay_amt, p.pay_method, p.pay_status, -->
<!-- 		    c.cus_rnum, c.cus_com, c.cus_name, pd.level_name, -->
<!-- 		    li.level_memo, li.level_fee, li.level_vol, -->
<!-- 		    fl.func_name, fi.func_memo, fi.func_fee -->
<!-- 		from payment p left outer join customer c on p.cus_rnum = c.cus_rnum -->
<!-- 		               left outer join payment_detail pd on p.pay_code = pd.pay_code -->
<!-- 		               left outer join level_info li on pd.level_name = li.level_name -->
<!-- 		               left outer join func_level fl on pd.pay_code = fl.pay_code -->
<!-- 		               left outer join func_info fi on fl.func_name = fi.func_name -->
<!-- 		where c.cus_rnum = #{cusRnum} -->
<!-- 	</select> -->
	
<!-- 	<update id="updatePayStatus" parameterType="paymentVO"> -->
<!-- 		update payment -->
<!-- 			set -->
<!-- 				pay_status = 'Y' -->
<!-- 		where pay_code = #{payCode} -->
<!-- 	</update> -->
	
</mapper>